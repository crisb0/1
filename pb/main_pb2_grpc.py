# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import pb.main_pb2 as main__pb2


class MainStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HelloWorld = channel.unary_unary(
                '/Main/HelloWorld',
                request_serializer=main__pb2.User.SerializeToString,
                response_deserializer=main__pb2.String.FromString,
                )


class MainServicer(object):
    """Missing associated documentation comment in .proto file"""

    def HelloWorld(self, request, context):
        """Test!
        """
        print(request)
        user = request.name
        return main__pb2.String(value=user)


def add_MainServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HelloWorld': grpc.unary_unary_rpc_method_handler(
                    servicer.HelloWorld,
                    request_deserializer=main__pb2.User.FromString,
                    response_serializer=main__pb2.String.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Main', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Main(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def HelloWorld(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Main/HelloWorld',
            main__pb2.User.SerializeToString,
            main__pb2.String.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
